# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false

    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: k3s.io/hostname
              operator: NotIn
              values:
              - star-train.mkz.me

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 32Gi

  ingress:
    enabled: true
    hosts:
    - prometheus.services.mkz.me
    ingressClassName: traefik
    tls:
    - secretName: tls-prometheus-cert
      hosts:
      - prometheus.services.mkz.me

    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      traefik.ingress.kubernetes.io/redirect-entry-point: https
      traefik.ingress.kubernetes.io/redirect-permanent: "true"
      traefik.ingress.kubernetes.io/router.middlewares: traefik-forward-auth-traefik-forward-auth@kubernetescrd

alertmanager:
  alertmanagerSpec:
    replicas: 2
    useExistingSecret: true
    configSecret: alertmanager-config

    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 512Mi

  ingress:
    enabled: true
    hosts:
    - alertmanager.services.mkz.me
    ingressClassName: traefik
    tls:
    - secretName: tls-alertmanager-cert
      hosts:
      - alertmanager.services.mkz.me

    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      traefik.ingress.kubernetes.io/redirect-entry-point: https
      traefik.ingress.kubernetes.io/redirect-permanent: "true"
      traefik.ingress.kubernetes.io/router.middlewares: traefik-forward-auth-traefik-forward-auth@kubernetescrd

grafana:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      traefik.ingress.kubernetes.io/redirect-entry-point: "https"
      traefik.ingress.kubernetes.io/redirect-permanent: "true"

    hosts:
    - grafana.services.mkz.me
    ingressClassName: traefik
    tls:
    - secretName: tls-grafana-cert
      hosts:
      - grafana.services.mkz.me

  admin:
    existingSecret: grafana-secret
    userKey: user
    passwordKey: password

  env:
    GF_DATABASE_TYPE: postgres
    GF_DATABASE_NAME: grafana
    GF_DATABASE_HOST: postgres-instance.postgres
    GF_DATABASE_SSL_MODE: require
    GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
    GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
    GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
    GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://dex.services.mkz.me/auth"
    GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://dex.services.mkz.me/token"
    GF_AUTH_GENERIC_OAUTH_API_URL: "https://dex.services.mkz.me/userinfo"
    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "'Admin'"

  envValueFrom:
    GF_DATABASE_USER:
      secretKeyRef:
        name: grafana-postgres
        key: username
    GF_DATABASE_PASSWORD:
      secretKeyRef:
        name: grafana-postgres
        key: password
    GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
      secretKeyRef:
        name: grafana-oidc-client
        key: client_id
    GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
      secretKeyRef:
        name: grafana-oidc-client
        key: client_secret

kubeApiServer:
  enabled: true

kubeControllerManager:
  enabled: true
  endpoints:
  - 10.0.0.2
  service:
    enabled: true
    port: 10257
    targetPort: 10257
  serviceMonitor:
    enabled: true
    https: true
    insecureSkipVerify: true

kubeScheduler:
  enabled: true
  endpoints:
  - 10.0.0.2
  service:
    enabled: true
    port: 10259
    targetPort: 10259
  serviceMonitor:
    enabled: true
    https: true
    insecureSkipVerify: true

kubeProxy:
  enabled: true
  endpoints:
  - 10.0.0.2


additionalPrometheusRulesMap:
  vault-alerts:
    groups:
    - name: vault
      rules:
        - alert: VaultUp
          expr: avg by(instance) (vault_up) != 1
          for: 10m
          labels:
            service: vault
            severity: critical
          annotations:
            summary: "Vault instance `{{$labels.instance}}` is down"
            description: "The Vault instance at `{{$labels.instance}}` has been down for the last 10m"

        - alert: VaultUninitialized
          expr: avg by(instance) (vault_initialized) != 1
          for: 10m
          labels:
            service: vault
            severity: critical
          annotations:
            summary: "Vault instance `{{$labels.instance}}` is uninitialized"
            description: "The Vault instance at `{{$labels.instance}}` has been uninitialized for the last 10m"

        - alert: VaultSealed
          expr: avg by(instance) (vault_sealed) != 0
          for: 10m
          labels:
            service: vault
            severity: critical
          annotations:
            summary: "Vault instance `{{$labels.instance}}` is sealed"
            description: "The Vault instance at `{{$labels.instance}}` has been sealed for the last 10m"

        - alert: VaultStandby
          expr: count(avg by(instance) (vault_standby) == 0) != 1
          for: 10m
          labels:
            service: vault
            severity: critical
          annotations:
            summary: "There are {{ $value }} active Vault instance(s)"
            description: "The Vault instance at `{{$labels.instance}}` has been Standby for the last 10m"
