# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 32Gi

  ingress:
    enabled: true
    hosts:
    - prometheus.services.mkz.me
    tls:
    - secretName: tls-prometheus-cert
      hosts:
      - prometheus.services.mkz.me

    annotations:
      kubernetes.io/ingress.class: traefik
      cert-manager.io/cluster-issuer: letsencrypt-prod
      traefik.ingress.kubernetes.io/redirect-entry-point: https
      traefik.ingress.kubernetes.io/redirect-permanent: "true"
      traefik.ingress.kubernetes.io/router.middlewares: traefik-forward-auth-traefik-forward-auth@kubernetescrd

alertmanager:
  alertmanagerSpec:
    replicas: 2
    useExistingSecret: true
    configSecret: alertmanager-config

    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 512Mi


  ingress:
    enabled: true
    hosts:
    - alertmanager.services.mkz.me
    tls:
    - secretName: tls-alertmanager-cert
      hosts:
      - alertmanager.services.mkz.me

    annotations:
      kubernetes.io/ingress.class: traefik
      cert-manager.io/cluster-issuer: letsencrypt-prod
      traefik.ingress.kubernetes.io/redirect-entry-point: https
      traefik.ingress.kubernetes.io/redirect-permanent: "true"
      traefik.ingress.kubernetes.io/router.middlewares: traefik-forward-auth-traefik-forward-auth@kubernetescrd

grafana:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "traefik"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      traefik.ingress.kubernetes.io/redirect-entry-point: "https"
      traefik.ingress.kubernetes.io/redirect-permanent: "true"

    hosts:
    - grafana.services.mkz.me
    tls:
    - secretName: tls-grafana-cert
      hosts:
      - grafana.services.mkz.me

  admin:
    existingSecret: grafana-secret
    userKey: user
    passwordKey: password

  env:
    GF_DATABASE_TYPE: postgres
    GF_DATABASE_NAME: grafana
    GF_DATABASE_HOST: postgres-monitoring
    GF_DATABASE_SSL_MODE: require
    GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
    GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
    GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
    GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://dex.services.mkz.me/auth"
    GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://dex.services.mkz.me/token"
    GF_AUTH_GENERIC_OAUTH_API_URL: "https://dex.services.mkz.me/userinfo"
    GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "'Admin'"

  envValueFrom:
    GF_DATABASE_USER:
      secretKeyRef:
        name: grafana.postgres-monitoring.credentials.postgresql.acid.zalan.do
        key: username
    GF_DATABASE_PASSWORD:
      secretKeyRef:
        name: grafana.postgres-monitoring.credentials.postgresql.acid.zalan.do
        key: password
    GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
      secretKeyRef:
        name: grafana-oidc-client
        key: client_id
    GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
      secretKeyRef:
        name: grafana-oidc-client
        key: client_secret
