apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: secretstore-vault
  namespace: monitoring
spec:
  provider:
    vault:
      auth:
        kubernetes:
          mountPath: kubernetes
          role: external-secrets
      path: secret
      server: http://vault.vault:8200
      version: v2
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: prometheus-community
  namespace: flux-system
spec:
  interval: 1m0s
  url: https://prometheus-community.github.io/helm-charts
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kube-prometheus-stack-es-grafana-secret-c8d6fa88
  namespace: monitoring
spec:
  dataFrom:
    - extract:
        conversionStrategy: Default
        key: secret/namespaces/monitoring/grafana-secret
  refreshInterval: 15m
  secretStoreRef:
    kind: SecretStore
    name: secretstore-vault
  target:
    creationPolicy: Owner
    deletionPolicy: Delete
    immutable: false
    name: grafana-secret
    template:
      engineVersion: v2
      type: Opaque
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kube-prometheus-stack-es-grafana-oidc-client-c8cd01d8
  namespace: monitoring
spec:
  dataFrom:
    - extract:
        conversionStrategy: Default
        key: secret/namespaces/monitoring/grafana-oidc-client
  refreshInterval: 15m
  secretStoreRef:
    kind: SecretStore
    name: secretstore-vault
  target:
    creationPolicy: Owner
    deletionPolicy: Delete
    immutable: false
    name: grafana-oidc-client
    template:
      engineVersion: v2
      type: Opaque
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kube-prometheus-stack-es-grafana-authentik-oidc-client-c839b666
  namespace: monitoring
spec:
  dataFrom:
    - extract:
        conversionStrategy: Default
        key: secret/namespaces/monitoring/grafana-authentik-oidc-client
  refreshInterval: 15m
  secretStoreRef:
    kind: SecretStore
    name: secretstore-vault
  target:
    creationPolicy: Owner
    deletionPolicy: Delete
    immutable: false
    name: grafana-authentik-oidc-client
    template:
      engineVersion: v2
      type: Opaque
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kube-prometheus-stack-es-alertmanager-config-c84a2f77
  namespace: monitoring
spec:
  dataFrom:
    - extract:
        conversionStrategy: Default
        key: secret/namespaces/monitoring/alertmanager-config
  refreshInterval: 15m
  secretStoreRef:
    kind: SecretStore
    name: secretstore-vault
  target:
    creationPolicy: Owner
    deletionPolicy: Delete
    immutable: false
    name: alertmanager-config
    template:
      engineVersion: v2
      type: Opaque
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kube-prometheus-stack-es-grafana-postgres-c893b633
  namespace: monitoring
spec:
  dataFrom:
    - extract:
        conversionStrategy: Default
        key: secret/namespaces/monitoring/grafana-postgres
  refreshInterval: 15m
  secretStoreRef:
    kind: SecretStore
    name: secretstore-vault
  target:
    creationPolicy: Owner
    deletionPolicy: Delete
    immutable: false
    name: grafana-postgres
    template:
      engineVersion: v2
      type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-prometheus-stack-helm-val-prometheus-c840a4c5
  namespace: monitoring
data:
  values.yaml: |
    # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

    crds:
      upgradeJob:
        enabled: true
        kubectl:
          registry: registry.k8s.io
          repository: kubectl
          tag: v1.31.4

    prometheus:
      prometheusSpec:
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false

        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - polygon-wave.mkz.me
                  - tokimeki.mkz.me

        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn-crypto-global
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 32Gi

      ingress:
        enabled: true
        hosts:
        - prometheus.services.mkz.me
        ingressClassName: traefik
        tls:
        - secretName: tls-prometheus-cert
          hosts:
          - prometheus.services.mkz.me

        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          traefik.ingress.kubernetes.io/redirect-entry-point: https
          traefik.ingress.kubernetes.io/redirect-permanent: "true"
          traefik.ingress.kubernetes.io/router.middlewares: traefik-forward-auth-traefik-forward-auth@kubernetescrd

    alertmanager:
      alertmanagerSpec:
        replicas: 2
        useExistingSecret: true
        configSecret: alertmanager-config

        podAntiAffinity: ""

        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - polygon-wave.mkz.me
                  - tokimeki.mkz.me
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: alertmanager
                  operator: In
                  values:
                  - prometheus-kube-prometheus-alertmanager
              topologyKey: kubernetes.io/hostname

        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn-crypto-global
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 512Mi

      ingress:
        enabled: true
        hosts:
        - alertmanager.services.mkz.me
        ingressClassName: traefik
        tls:
        - secretName: tls-alertmanager-cert
          hosts:
          - alertmanager.services.mkz.me

        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          traefik.ingress.kubernetes.io/redirect-entry-point: https
          traefik.ingress.kubernetes.io/redirect-permanent: "true"
          traefik.ingress.kubernetes.io/router.middlewares: traefik-forward-auth-traefik-forward-auth@kubernetescrd

    grafana:
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          traefik.ingress.kubernetes.io/redirect-entry-point: "https"
          traefik.ingress.kubernetes.io/redirect-permanent: "true"

        hosts:
        - grafana.services.mkz.me
        ingressClassName: traefik
        tls:
        - secretName: tls-grafana-cert
          hosts:
          - grafana.services.mkz.me

      admin:
        existingSecret: grafana-secret
        userKey: user
        passwordKey: password

      env:
        GF_DATABASE_TYPE: postgres
        GF_DATABASE_NAME: grafana
        GF_DATABASE_HOST: postgres-instance.postgres
        GF_DATABASE_SSL_MODE: require
        GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
        GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
        GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
        # GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://dex.services.mkz.me/auth"
        # GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://dex.services.mkz.me/token"
        # GF_AUTH_GENERIC_OAUTH_API_URL: "https://dex.services.mkz.me/userinfo"
        # GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "'Admin'"
        GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
        GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://auth.services.mkz.me/application/o/authorize/"
        GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://auth.services.mkz.me/application/o/token/"
        GF_AUTH_GENERIC_OAUTH_API_URL: "https://auth.services.mkz.me/application/o/userinfo/"
        GF_AUTH_SIGNOUT_REDIRECT_URL: "https://auth.services.mkz.me/application/o/grafana/end-session/"
        GF_AUTH_SIGNOUT_REDIRECT_URL: "https://auth.services.mkz.me/application/o/grafana/end-session/"
        # Optionally enable auto-login (bypasses Grafana login screen)
        GF_AUTH_OAUTH_AUTO_LOGIN: "true"
        # Optionally map user groups to Grafana roles
        GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'"

      envValueFrom:
        GF_DATABASE_USER:
          secretKeyRef:
            name: grafana-postgres
            key: username
        GF_DATABASE_PASSWORD:
          secretKeyRef:
            name: grafana-postgres
            key: password
        # GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
        #   secretKeyRef:
        #     name: grafana-oidc-client
        #     key: client_id
        # GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
        #   secretKeyRef:
        #     name: grafana-oidc-client
        #     key: client_secret
        GF_AUTH_GENERIC_OAUTH_CLIENT_ID:
          secretKeyRef:
            name: grafana-authentik-oidc-client
            key: client_id
        GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
         secretKeyRef:
            name: grafana-authentik-oidc-client
            key: client_secret

    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: true
      endpoints:
      - 10.0.0.2
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeScheduler:
      enabled: true
      endpoints:
      - 10.0.0.2
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeProxy:
      enabled: true
      endpoints:
      - 10.0.0.2


    additionalPrometheusRulesMap:
      flux-alerts:
        groups:
        - name: flux
          rules:
            - alert: SuspendedResource
              expr: gotk_suspend_status == 1
              for: 10m
              labels:
                service: flux
                severity: warning
              annotations:
                summary: "Flux resource `{{$labels.kind}}/{{$labels.name}}` is suspended"
                description: "The resource was manually suspended. You should resume it"
            - alert: FailingReconcile
              expr: gotk_reconcile_condition{status="False"} == 1
              for: 10m
              labels:
                service: flux
                severity: critical
              annotations:
                summary: "Flux resource `{{$labels.kind}}/{{$labels.name}}` is failing"
                description: "Reconciliation could not succeed. This requires investigation"
            - alert: FailingHelmReleaseReconcile
              expr: gotk_resource_info{customresource_kind="HelmRelease", ready="False"} == 1
              for: 10m
              labels:
                service: flux
                severity: critical
              annotations:
                summary: "Flux resource `{{$labels.customresource_kind}}/{{$labels.chart_name}}` is failing"
                description: "Reconciliation in namespace `{{$labels.exported_namespace}}` could not succeed. This requires investigation"

      vault-alerts:
        groups:
        - name: vault
          rules:
            - alert: VaultUp
              expr: avg by(instance) (vault_up) != 1
              for: 10m
              labels:
                service: vault
                severity: critical
              annotations:
                summary: "Vault instance `{{$labels.instance}}` is down"
                description: "The Vault instance at `{{$labels.instance}}` has been down for the last 10m"

            - alert: VaultUninitialized
              expr: avg by(instance) (vault_initialized) != 1
              for: 10m
              labels:
                service: vault
                severity: critical
              annotations:
                summary: "Vault instance `{{$labels.instance}}` is uninitialized"
                description: "The Vault instance at `{{$labels.instance}}` has been uninitialized for the last 10m"

            - alert: VaultSealed
              expr: avg by(instance) (vault_sealed) != 0
              for: 10m
              labels:
                service: vault
                severity: critical
              annotations:
                summary: "Vault instance `{{$labels.instance}}` is sealed"
                description: "The Vault instance at `{{$labels.instance}}` has been sealed for the last 10m"

            - alert: VaultStandby
              expr: count(avg by(instance) (vault_standby) == 0) != 1
              for: 10m
              labels:
                service: vault
                severity: critical
              annotations:
                summary: "There are {{ $value }} active Vault instance(s)"
                description: "The Vault instance at `{{$labels.instance}}` has been Standby for the last 10m"

    defaultRules:
      disabled:
        CPUThrottlingHigh: true

    # https://github.com/fluxcd/flux2-monitoring-example/blob/main/monitoring/controllers/kube-prometheus-stack/kube-state-metrics-config.yaml
    kube-state-metrics:
      # collectors: [ ]
      # extraArgs:
      #   - --custom-resource-state-only=true
      rbac:
        extraRules:
          - apiGroups:
              - source.toolkit.fluxcd.io
              - kustomize.toolkit.fluxcd.io
              - helm.toolkit.fluxcd.io
              - notification.toolkit.fluxcd.io
              - image.toolkit.fluxcd.io
            resources:
              - gitrepositories
              - buckets
              - helmrepositories
              - helmcharts
              - ocirepositories
              - kustomizations
              - helmreleases
              - alerts
              - providers
              - receivers
              - imagerepositories
              - imagepolicies
              - imageupdateautomations
            verbs: [ "list", "watch" ]
      customResourceState:
        enabled: true
        config:
          spec:
            resources:
              - groupVersionKind:
                  group: kustomize.toolkit.fluxcd.io
                  version: v1
                  kind: Kustomization
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux Kustomization resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, lastAppliedRevision ]
                      source_name: [ spec, sourceRef, name ]
              - groupVersionKind:
                  group: helm.toolkit.fluxcd.io
                  version: v2
                  kind: HelmRelease
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux HelmRelease resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, history, "0", chartVersion ]
                      chart_name: [ status, history, "0", chartName ]
                      chart_app_version: [ status, history, "0", appVersion ]
                      chart_ref_name: [ spec, chartRef, name ]
                      chart_source_name: [ spec, chart, spec, sourceRef, name ]
              - groupVersionKind:
                  group: source.toolkit.fluxcd.io
                  version: v1
                  kind: GitRepository
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux GitRepository resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, artifact, revision ]
                      url: [ spec, url ]
              - groupVersionKind:
                  group: source.toolkit.fluxcd.io
                  version: v1beta2
                  kind: Bucket
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux Bucket resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, artifact, revision ]
                      endpoint: [ spec, endpoint ]
                      bucket_name: [ spec, bucketName ]
              - groupVersionKind:
                  group: source.toolkit.fluxcd.io
                  version: v1
                  kind: HelmRepository
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux HelmRepository resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, artifact, revision ]
                      url: [ spec, url ]
              - groupVersionKind:
                  group: source.toolkit.fluxcd.io
                  version: v1
                  kind: HelmChart
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux HelmChart resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, artifact, revision ]
                      chart_name: [ spec, chart ]
                      chart_version: [ spec, version ]
              - groupVersionKind:
                  group: source.toolkit.fluxcd.io
                  version: v1beta2
                  kind: OCIRepository
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux OCIRepository resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      revision: [ status, artifact, revision ]
                      url: [ spec, url ]
              - groupVersionKind:
                  group: notification.toolkit.fluxcd.io
                  version: v1beta3
                  kind: Alert
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux Alert resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      suspended: [ spec, suspend ]
              - groupVersionKind:
                  group: notification.toolkit.fluxcd.io
                  version: v1beta3
                  kind: Provider
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux Provider resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      suspended: [ spec, suspend ]
              - groupVersionKind:
                  group: notification.toolkit.fluxcd.io
                  version: v1
                  kind: Receiver
                metricNamePrefix: gotk
                metrics:
                  - name: "resource_info"
                    help: "The current state of a Flux Receiver resource."
                    each:
                      type: Info
                      info:
                        labelsFromPath:
                          name: [ metadata, name ]
                    labelsFromPath:
                      exported_namespace: [ metadata, namespace ]
                      ready: [ status, conditions, "[type=Ready]", status ]
                      suspended: [ spec, suspend ]
                      webhook_path: [ status, webhookPath ]
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  annotations:
    configMapHash: b784efbf6d1f86c7499fbb83397906fdf9cd76aabe9d2590f79726e62e8124b8
  name: prometheus
  namespace: monitoring
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: 71.2.0
  install:
    createNamespace: false
    skipCRDs: false
  interval: 10m0s
  timeout: 5m0s
  values: {}
  valuesFrom:
    - kind: ConfigMap
      name: kube-prometheus-stack-helm-val-prometheus-c840a4c5
      valuesKey: values.yaml
